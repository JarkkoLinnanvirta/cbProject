

//
// PRIVATE FUNCTIONS
//



Function ME_UpdateEditor(editor_id, x,y)
	editor.ME_Editor = editor_id
	If BoxOverlap(x+ME_EditorLeftBarWidth(editor),y, editor\width-ME_EditorLeftBarWidth(editor),editor\height, MouseX(),MouseY(),1,1) Then
		//Mouse is over this editor
		SetMouseCursor(CURSOR_TEXT)
		If MouseDown(1) Then
			//Calculate location For the caret
			line_number		= Min(Max(0,(MouseY()-y)/ME_ChrH+editor\first_visible_line_number), editor\count_lines-1)
			le.ME_Line		= ME_GetLine(editor, line_number)
			position		= ME_MousePositionInLine(le\id, MouseX()-x-ME_EditorLeftBarWidth(editor))
			
			//Check If a caret already exists in the same place
			For caret.ME_Caret = Each ME_Caret
				If caret\line_id = le\id And caret\position = position Then Goto skip_create_caret
			Next caret
			
			If Not HotKeyDown(cbKeyLControl) Then
				//Remove multiple carets (If exists) And create a New one at the mouse caret location
				ME_DeleteCarets(editor_id)
			EndIf
			caret.ME_Caret 		= ME_NewCaret(editor, le, position)
			ME_CaretBlinkTimer	= Timer()
			ME_CalculateCaretDrawingPosition(caret\id)
		EndIf
		scroll = -ME_Scroll + HotKey(cbKeyLControl, cbKeyDown) - HotKey(cbKeyLControl, cbKeyUp)
		If scroll Then
			count_visible_lines				= RoundDown(Float(editor\height)/Float(ME_ChrH))
			editor\first_visible_line_number= Max(0,Min(editor\first_visible_line_number+scroll,editor\count_lines-count_visible_lines))
		EndIf
		skip_create_caret:
	ElseIf BoxOverlap(x,y, ME_EditorLeftBarWidth(editor),editor\height, MouseX(),MouseY(),1,1) Then
		SetMouseCursor(CURSOR_ALTERNATE)
	Else
		SetMouseCursor(CURSOR_OFF)
	EndIf
	
	copy = HotKey(cbKeyLControl,cbKeyC)
	If copy Then ME_ClearClipboard()
	For caret.ME_Caret = Each ME_Caret
		If caret\editor_id = editor_id Then
			el = caret\line_id
			'ME_UpdateCaret(caret\id)
			If copy Then ME_AddToClipboard(ME_GetCaretSelectedText(caret\id))
		EndIf
	Next caret
	If copy Then ME_ExportClipboard()
EndFunction

//Runs regular tasks needed to operate all editors. Should be called at the beginning of the program main loop.
//You should pass the value of GetKey() to this function. This way you can use the value in other places too if needed.
Function UpdateEditors(getkey_value)
	Debug("updateeditor start")
	ME_Input	= getkey_value
	ME_InputChr	= Chr(ME_Input)
	ME_Scroll	= MouseMoveZ()
	ME_UpdateClipboard()
	UpdateHotKey()
	
	If HotKey(cbKeyLeft) Or HotKey(cbKeyLShift,cbKeyLeft) Then				//Left
		'ME_UpdateCaretTail(caret\id, cbKeyLeft)
		'ME_MoveCaret(caret_id, "Left")
		'ME_UpdateCaretHighlights(caret)
	ElseIf HotKey(cbKeyRight) Or HotKey(cbKeyLShift,cbKeyRight) Then		//Right
		'ME_UpdateCaretTail(caret\id, cbKeyRight)
		'ME_MoveCaret(caret_id, "Right")
		'ME_UpdateCaretHighlights(caret)
	ElseIf HotKey(cbKeyDown) Or HotKey(cbKeyLShift, cbKeyDown) Then			//DOWN
		'ME_UpdateCaretTail(caret\id, cbKeyDown)
		'ME_MoveCaret(caret_id, "down")
		'ME_UpdateCaretHighlights(caret)
	ElseIf HotKey(cbKeyUp) Or HotKey(cbKeyLShift, cbKeyUp) Then				//UP
		'ME_UpdateCaretTail(caret\id, cbKeyUp)
		'ME_MoveCaret(caret_id, "up")
		'ME_UpdateCaretHighlights(caret)
	ElseIf HotKey(cbKeyHome) Then											//HOME
		'tabs = ME_IndentLevel(row\id)
		'If caret\position = 0 Then
		'	caret\position = tabs
		'ElseIf caret\position > tabs Then
		'	caret\position = 0
		'	If editor\home_after_tabs Then caret\position = tabs
		'Else
		'	caret\position = 0
		'EndIf
		'caret\lean_position= caret\position
		'ME_CalculateCaretDrawingPosition(caret)
	ElseIf HotKey(cbKeyEnd) Then											//End
		'caret\position		= Len(row\content_text)
		'caret\lean_position= caret\position
		'ME_CalculateCaretDrawingPosition(caret)
	ElseIf HotKey(cbKeyTab) Then											//TAB
		'row\content_text = StrInsert(row\content_text, caret\position, Chr(9))
		'row\redraw		= True
		'ME_PanCarets(row\id, caret\position, "Right")
	ElseIf HotKey(cbKeyEnter) Then											//ENTER
		'indent				= ME_IndentLevel(row\id)
		'caret\line_id		= ME_SplitLine(row\id, caret\position)
		'row					= caret\line_id
		'caret\position		= ME_IF(editor\auto_indent, indent, 0)
		'caret\lean_position	= 0
		'ME_CalculateCaretDrawingPosition(caret)
	ElseIf HotKey(cbKeyBackspace) Then										//BACKSPACE
		'If caret\position > 0 Then
		'	row\content_text = StrRemove(row\content_text, caret\position, 1)
		'	row\redraw		= True
		'	ME_PanCarets(row\id, caret\position, "Left")
		'ElseIf Before(row) <> NULL
		'	line2.ME_Line		= Before(row)
		'	caret\position		= Len(line2\content_text)
		'	caret\lean_position= caret\position
		'	ME_CombineLines(line2, row\id) //This takes care of moving the caret To the previous Line
		'EndIf
	ElseIf HotKey(cbKeyDel) Then											//Delete
		'If caret\position < Len(row\content_text) Then
		'	row\content_text = StrRemove(row\content_text, caret\position+1, 1)
		'	row\redraw		= True
		'	ME_PanCarets(row\id, caret\position+1, "Left") //Pan other carets Left, keep thisone in place
		'ElseIf After(row) <> NULL
		'	line2.ME_Line = After(row)
		'	ME_CombineLines(row\id, line2) //This takes care of moving the caret To the previous Line
		'EndIf
	ElseIf HotKey(cbKeyLControl, cbKeyZ) Then
		ME_UndoAction(ActiveEditor)
	ElseIf HotKey(cbKeyLControl, cbKeyY) Then
		ME_RedoAction(ActiveEditor)
	ElseIf HotKey(cbKeyLControl,cbKeyR) Then
		ME_RepeatAction(ActiveEditor)
	ElseIf HotKey(cbKeyLControl, cbKeyU) Then
		ME_CutActionLog = True
	ElseIf ME_Input															//Input CHARACTER
		If CountKeys() = 1 Then	//Ensure we are Not pressing multiple keys simultaneously (= hotkeys)
			If (ME_Input >= 32 And ME_Input <= 126) Or (ME_Input = 145) Or (ME_Input = 146) Or (ME_Input >= 160) Then
				ME_PerformAction(ActiveEditor, "Insert", ME_InputChr)
				
			EndIf
		EndIf
	Else
		blink = False //Blink at normal timing
	EndIf
	
	Debug("updateeditor end")
EndFunction

Function ME_DrawEditorFrame(editor_id, x,y)
	editor.ME_Editor = editor_id
	
	//Frame
	Color cbBlack
	Box x-1,y-1, editor\width+2,editor\height+2, OFF
	
	//Background
	Color 231,240,248
	Box x,y, editor\width, editor\height
	
	//Left bar
	If editor\show_line_numbers Then
		Color 159,193,221
		Box x,y,ME_EditorLeftBarWidth(editor)-1,editor\height
	EndIf
EndFunction

Function ME_EditorLeftBarWidth(editor_id)
	editor.ME_Editor = editor_id
	Return TextWidth(editor\count_lines+"AA")
EndFunction

Function ME_MousePositionInLine(line_id, line_draw_x)
	row.ME_Line 	= line_id
	editor.ME_Editor= row\editor_id
	position		= Max(0,(Float(line_draw_x)/Float(ME_ChrW)))
	If position = 0 Then Return 0
	difference		= ME_TabulatedPosition(line_id,position) - position
	Return Min(position - difference, Len(row\content_text))
	'Return Min(ME_TabulatedPosition(line_id,position), Len(row\content_text))
EndFunction

Function ME_NewColour(r=-1,g=-1,b=-1)
	colour.ME_Colour= New(ME_Colour)
	colour\id		= ConvertToInteger(colour)
	If r<0 Or g<0 Or b<0 Then
		colour\r	= getRGB(RED)
		colour\g	= getRGB(GREEN)
		colour\b	= getRGB(BLUE)
	Else
		colour\r	= r
		colour\g	= g
		colour\b	= b
	EndIf
	Return colour\id
EndFunction

Function ME_UseColour(colour_id)
	colour.ME_Colour = colour_id
	Color colour\r,colour\g,colour\b
EndFunction


Function ME_IF(condition, true_$, false_$)
	If condition Then Return true_ Else Return false_
EndFunction
