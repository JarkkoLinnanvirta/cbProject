

//
// PRIVATE FUNCTIONS
//



Function ME_UpdateEditor(editor_id, x,y)
	editor.ME_Editor = editor_id
	If BoxOverlap(x+ME_EditorLeftBarWidth(editor),y, editor\width-ME_EditorLeftBarWidth(editor),editor\height, MouseX(),MouseY(),1,1) Then
		//Mouse is over this editor
		SetMouseCursor(CURSOR_TEXT)
		If MouseDown(1) Then
			//Calculate location For the caret
			line_number		= Min(Max(0,(MouseY()-y)/ME_ChrH+editor\first_visible_line_number), editor\count_lines-1)
			le.ME_Line		= ME_GetLine(editor, line_number)
			position		= ME_MousePositionInLine(le\id, MouseX()-x-ME_EditorLeftBarWidth(editor))
			
			//Check If a caret already exists in the same place
			For caret.ME_Caret = Each ME_Caret
				If caret\line_id = le\id And caret\position = position Then Goto skip_create_caret
			Next caret
			
			If Not HotKeyDown(cbKeyLControl) Then
				//Remove multiple carets (If exists) And create a New one at the mouse caret location
				ME_DeleteCarets(editor_id)
			EndIf
			caret.ME_Caret 		= ME_NewCaret(editor, le, position)
			ME_CaretBlinkTimer	= Timer()
			ME_CalculateCaretDrawingPosition(caret\id)
		EndIf
		scroll = -ME_Scroll + HotKey(cbKeyLControl, cbKeyDown) - HotKey(cbKeyLControl, cbKeyUp)
		If scroll Then
			count_visible_lines				= RoundDown(Float(editor\height)/Float(ME_ChrH))
			editor\first_visible_line_number= Max(0,Min(editor\first_visible_line_number+scroll,editor\count_lines-count_visible_lines))
		EndIf
		skip_create_caret:
	ElseIf BoxOverlap(x,y, ME_EditorLeftBarWidth(editor),editor\height, MouseX(),MouseY(),1,1) Then
		SetMouseCursor(CURSOR_ALTERNATE)
	Else
		SetMouseCursor(CURSOR_OFF)
	EndIf
	
	copy = HotKey(cbKeyLControl,cbKeyC)
	If copy Then ME_ClearClipboard()
	For caret.ME_Caret = Each ME_Caret
		If caret\editor_id = editor_id Then
			el = caret\line_id
			ME_UpdateCaret(caret\id)
			If copy Then ME_AddToClipboard(ME_GetCaretSelectedText(caret\id))
		EndIf
	Next caret
	If copy Then ME_ExportClipboard()
EndFunction

//Runs regular tasks needed to operate all editors. Should be called at the beginning of the program main loop.
//You should pass the value of GetKey() to this function. This way you can use the value in other places too if needed.
Function UpdateEditors(getkey_value)
	Debug("updateeditor start")
	ME_Input	= getkey_value
	ME_InputChr	= Chr(ME_Input)
	ME_Scroll	= MouseMoveZ()
	ME_UpdateClipboard()
	UpdateHotKey()
	
	If HotKey(cbKeyTab) Then											//TAB
		ME_PerformAction(ActiveEditor, "Insert", Chr(9))
	ElseIf HotKey(cbKeyEnter) Then											//ENTER
		ME_PerformAction(ActiveEditor, "Insert", Chr(13)+Chr(10))
	ElseIf HotKey(cbKeyBackspace) Then										//BACKSPACE
		ME_PerformAction(ActiveEditor, "DeleteBefore")
	ElseIf HotKey(cbKeyDel) Then											//Delete
		ME_PerformAction(ActiveEditor, "DeleteAfter")
	ElseIf HotKey(cbKeyLControl, cbKeyZ) Then								//UNDO
		ME_UndoAction(ActiveEditor)
	ElseIf HotKey(cbKeyLControl, cbKeyY) Then								//REDO
		ME_RedoAction(ActiveEditor)
	ElseIf HotKey(cbKeyLControl,cbKeyR) Then								//Repeat
		ME_RepeatAction(ActiveEditor)
	ElseIf HotKey(cbKeyLControl, cbKeyU) Then								//SPLIT UNDO BUFFER
		ME_CutActionLog = True
	ElseIf HotKey(cbKeyCapsLock) Then										//CAPS Lock
		ME_ToggleCapsLock()
	ElseIf ME_Input															//Input CHARACTER
		If CountKeys() = 1 Then	//Ensure we are Not pressing multiple keys simultaneously (= hotkeys)
			If (ME_Input >= 32 And ME_Input <= 126) Or (ME_Input = 145) Or (ME_Input = 146) Or (ME_Input >= 160) Then
				char$ = ME_InputChr
				If ME_CapsLock Then char = ME_ToggleCase(char)
				ME_PerformAction(ActiveEditor, "Insert", char)
			EndIf
		EndIf
	Else
		blink = False //Blink at normal timing
	EndIf
	
	Debug("updateeditor end")
EndFunction

Function ME_DrawEditorFrame(editor_id, x,y)
	editor.ME_Editor = editor_id
	
	//Frame
	Color cbBlack
	Box x-1,y-1, editor\width+2,editor\height+2, OFF
	
	//Background
	Color 231,240,248
	Box x,y, editor\width, editor\height
	
	//Left bar
	If editor\show_line_numbers Then
		Color 159,193,221
		Box x,y,ME_EditorLeftBarWidth(editor)-1,editor\height
	EndIf
EndFunction

Function ME_EditorLeftBarWidth(editor_id)
	editor.ME_Editor = editor_id
	Return TextWidth(editor\count_lines+"AA")
EndFunction

Function ME_MousePositionInLine(line_id, line_draw_x)
	row.ME_Line 	= line_id
	editor.ME_Editor= row\editor_id
	position		= Max(0,(Float(line_draw_x)/Float(ME_ChrW)))
	If position = 0 Then Return 0
	difference		= ME_TabulatedPosition(line_id,position) - position
	Return Min(position - difference, Len(row\content_text))
	'Return Min(ME_TabulatedPosition(line_id,position), Len(row\content_text))
EndFunction

Function ME_NewColour(r=-1,g=-1,b=-1)
	colour.ME_Colour= New(ME_Colour)
	colour\id		= ConvertToInteger(colour)
	If r<0 Or g<0 Or b<0 Then
		colour\r	= getRGB(RED)
		colour\g	= getRGB(GREEN)
		colour\b	= getRGB(BLUE)
	Else
		colour\r	= r
		colour\g	= g
		colour\b	= b
	EndIf
	Return colour\id
EndFunction

Function ME_UseColour(colour_id)
	colour.ME_Colour = colour_id
	Color colour\r,colour\g,colour\b
EndFunction


Function ME_IF(condition, true_$, false_$)
	If condition Then Return true_ Else Return false_
EndFunction

Function ME_ToggleCapsLock()
	ME_CapsLock = Not ME_CapsLock
	'SetLockLed(2, ME_CapsLock)
EndFunction

Function ME_ToggleCase(char$)
	a = Asc(char)
	If (a < 97) Or (a > 122 And a < 224) Then Return Lower(char) Else Return Upper(char)
EndFunction
